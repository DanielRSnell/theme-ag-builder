<div
  id="agnostic-state"
  class="h-[var(--maintoolbar-height)] w-full absolute top-0 left-0 bg-base-300"
>
  <div class="absolute top-[6px] left-[1%] z-[9999]">
    <div
      class="flex justify-start items-center font-black h-[32px] w-[150px] duration-300 ease-in-out"
    >
      <div class="inline-grid">
        <span
          class="pointer-events-none col-start-1 row-start-1 bg-[linear-gradient(90deg,theme(colors.error)_0%,theme(colors.secondary)_9%,theme(colors.secondary)_42%,theme(colors.primary)_47%,theme(colors.accent)_100%)] bg-clip-text blur-xl [-webkit-text-fill-color:transparent] [transform:translate3d(0,0,0)] before:content-[attr(data-text)] [@supports(color:oklch(0%_0_0))]:bg-[linear-gradient(90deg,oklch(var(--s))_4%,color-mix(in_oklch,oklch(var(--s)),oklch(var(--er)))_22%,oklch(var(--p))_45%,color-mix(in_oklch,oklch(var(--p)),oklch(var(--a)))_67%,oklch(var(--a))_100.2%)]"
          aria-hidden="true"
          data-text="component library"
        ></span>
        <span
          class="[&::selection]:text-base-content relative col-start-1 row-start-1 bg-[linear-gradient(90deg,theme(colors.error)_0%,theme(colors.secondary)_9%,theme(colors.secondary)_42%,theme(colors.primary)_47%,theme(colors.accent)_100%)] bg-clip-text [-webkit-text-fill-color:transparent] [&::selection]:bg-blue-700/20 [@supports(color:oklch(0%_0_0))]:bg-[linear-gradient(90deg,oklch(var(--s))_4%,color-mix(in_oklch,oklch(var(--s)),oklch(var(--er)))_22%,oklch(var(--p))_45%,color-mix(in_oklch,oklch(var(--p)),oklch(var(--a)))_67%,oklch(var(--a))_100.2%)]"
        >
          {{ '{{ AGNOSTIC }}'|e('html') }}
        </span>
      </div>
    </div>
  </div>
  {{ include("builder/components/topbar/actions.html") }}
  {{ include("builder/components/editor/builder-theme.html") }}

  <div class="absolute right-[15%] top-[6px] z-[9999]">
    <div class="join">
      <button
        :class="{ 'btn-active': tab === 'Code' }"
        class="py-1 btn join-item !h-[1rem] !min-h-[2rem]"
        @click="tab = 'Code'"
      >
        Code
      </button>
      <button
        :class="{ 'btn-active': tab === 'Build' }"
        class="py-1 btn join-item !h-[1rem] !min-h-[2rem]"
        @click="tab = 'Build'"
      >
        Build
      </button>
      <button
        :class="{ 'btn-active': tab === 'Config' }"
        class="py-1 btn join-item !h-[1rem] !min-h-[2rem]"
        @click="tab = 'Config'"
      >
        Config
      </button>
      <button
        :class="{ 'btn-active': tab === 'Prompt' }"
        class="py-1 btn join-item !h-[1rem] !min-h-[2rem] hidden"
        @click="tab = 'Prompt'"
      >
        Prompt
      </button>
    </div>
  </div>
  <div
    id="style-config"
    class="absolute w-[375px] mt-[var(--maintoolbar-height)] top-0 bg-base-300 z-[9999] right-0 overflow-auto h-[calc(100vh-var(--maintoolbar-height))]"
    x-show="tab === 'Config'"
    x-transition:enter="transition-opacity duration-300"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100"
    x-transition:leave="transition-opacity duration-300"
    x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0"
  >
    {{ include("builder/components/editor/config") }}
  </div>
  {# <div
    id="prompt-config"
    class="absolute mt-[var(--maintoolbar-height)] top-0 left-0 w-full bg-base-300 z-[9999] overflow-auto h-[calc(100vh-var(--maintoolbar-height))]"
    x-show="tab === 'Prompt'"
    x-transition:enter="transition-opacity duration-300"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100"
    x-transition:leave="transition-opacity duration-300"
    x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0"
  >
    {{ include("builder/components/editor/prompts") }}
  </div> #}

  {{ include("builder/components/editor/full-screen") }}

  {# Agnostic Manager Wrappers all of the builder, do not close div #}

  <script>
    function AgnosticManager() {
        return {
            init: false,
            active: false,
            tab: "Build",
            mode: "config",
            position: "right",
            active_el: null,
            configEditor: null,
            cssEditor: null,
            isInitialLoad: true,
            save_progress: false,
            activeTab: "editor",
            rest_url: "/wp-json/agnostic/v1",
            rest_nonce: "{{ function('wp_create_nonce', 'wp_rest') }}",
            raw_html: "",
            theme: localStorage.getItem("builderTheme") || "night",
            hasInitialized: false,

            init() {
                console.log("Init Agnostic Manager");
                this.debouncedUpdateTailwindConfig = this.debounce(this.updateTailwindConfig.bind(this), 300);
                this.debouncedUpdateTailwindCSS = this.debounce(this.updateTailwindCSS.bind(this), 300);
                window.AgnosticState = this;
            },

            debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            },

            initConfigTab() {
                if (this.hasInitialized) {
                    console.log("AgnosticManager has already been initialized.");
                    return;
                }
                this.getTailwindConfig();
                this.getTailwindCSS();
                this.setTheme(this.theme);
                window.AgnosticState = this;
                this.hasInitialized = true;
            },

            setTheme(newTheme) {
                this.theme = newTheme;
                document.documentElement.setAttribute("data-theme", this.theme);
                localStorage.setItem("builderTheme", this.theme);
            },

            initDocument() {
                const html = doc.querySelector("html").outerHTML;
                this.raw_html = html;
            },

            setDoc() {
                doc.querySelector("html").outerHTML = this.raw_html;
            },

            getTailwindConfig() {
                this.restRequest("GET", "/tailwind-config", null, (data) => {
                    console.log("Tailwind config loaded successfully", data);
                    const clean = prettyJavaScript(data);
                    console.log(clean, "THIS IS THE CLEANED JS", data);
                    window.configEditor.setValue(clean);
                    this.isInitialLoad = false;
                });
            },

            getTailwindCSS() {
                this.restRequest("GET", "/tailwind-css", null, (data) => {
                    console.log("Tailwind CSS loaded successfully", data);
                    const clean = prettyCSS(data);
                    console.log(clean, "THIS IS THE CLEANED CSS", data);
                    window.cssEditor.setValue(clean);
                    window.global_cssEditor.setValue(clean);
                    this.isInitialLoad = false;
                });
            },

            updateTailwindConfig() {
                console.log('Updating Tailwind config');
                const content = window.configEditor.getValue();
                this.restRequest(
                    "POST",
                    "/tailwind-config",
                    content,
                    () => {
                        console.log("Tailwind config updated successfully");
                        window.refreshTailwind();
                    }
                );
            },

            updateTailwindCSS() {
                console.log('Updating Tailwind CSS');
                const content = window.cssEditor.getValue();
                this.restRequest(
                    "POST",
                    "/tailwind-css",
                    content,
                    () => {
                        console.log("Tailwind CSS updated successfully");
                        window.refreshTailwind();
                    }
                );
            },

            saveConfig() {
                this.save_progress = true;
                console.log("Saving Tailwind config");
                this.updateTailwindConfig();
            },

            saveCSS() {
                this.save_progress = true;
                console.log("Saving Tailwind CSS");
                this.updateTailwindCSS();
            },

            restRequest(method, endpoint, data, successCallback) {
                console.log(`Starting REST request: ${method} ${endpoint}`, { data });
                const url = this.rest_url + endpoint;
                const options = {
                    method: method,
                    headers: {
                        "X-WP-Nonce": this.rest_nonce,
                    },
                    credentials: "same-origin",
                };
                if (data && method !== "GET") {
                    if (endpoint === "/tailwind-config" || endpoint === "/tailwind-css") {
                        options.headers["Content-Type"] = "text/plain";
                        options.body = data;
                    } else {
                        options.headers["Content-Type"] = "application/json";
                        options.body = JSON.stringify(data);
                    }
                }
                fetch(url, options)
                    .then((response) => {
                        console.log("Received response:", response);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.text();
                    })
                    .then((text) => {
                        let result;
                        try {
                            result = JSON.parse(text);
                        } catch (e) {
                            result = text;
                        }
                        console.log("Parsed result:", result);
                        successCallback(result);
                    })
                    .catch((error) => {
                        console.error("Error during REST request:", error);
                        console.error("Error stack:", error.stack);
                    })
                    .finally(() => {
                        console.log("Request lifecycle complete");
                    });
            },

            togglePosition(newPosition) {
                this.position = this.position === newPosition ? "left" : newPosition;
            },
        };
    }

    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    function reinitializeIframeWithTransition(newSrcdoc) {
      if (!document.startViewTransition) {
        const iframe = document.querySelector("#previewiframe");
        iframe.srcdoc = newSrcdoc;
        return;
      }

      const oldIframe = document.querySelector("#previewiframe");
      const iframeContainer = oldIframe.parentElement;

      const newIframe = document.createElement("iframe");
      newIframe.id = "previewiframe-new";
      newIframe.srcdoc = newSrcdoc;
      newIframe.style.display = "none";

      iframeContainer.appendChild(newIframe);

      newIframe.onload = () => {
        const transition = document.startViewTransition(() => {
          newIframe.style.display = "";
          newIframe.id = "previewiframe";

          oldIframe.style.display = "none";
          oldIframe.id = "previewiframe-old";

          return Promise.resolve();
        });

        transition.finished.then(() => {
          console.log("View transition completed");
          oldIframe.remove();
        });
      };
    }

    document.addEventListener("DOMContentLoaded", function () {
      const storedTheme = localStorage.getItem("builderTheme");
      if (!storedTheme) {
        localStorage.setItem("builderTheme", "night");
        document.documentElement.setAttribute("data-theme", "night");
      } else {
        document.documentElement.setAttribute("data-theme", storedTheme);
      }
    });
  </script>

  <style>
    @keyframes fade-in {
      from {
        opacity: 0;
      }
    }

    @keyframes fade-out {
      to {
        opacity: 0;
      }
    }

    ::view-transition-old(root) {
      animation: 300ms cubic-bezier(0.4, 0, 1, 1) both fade-out;
    }

    ::view-transition-new(root) {
      animation: 300ms cubic-bezier(0, 0, 0.2, 1) both fade-in;
    }
  </style>
</div>
