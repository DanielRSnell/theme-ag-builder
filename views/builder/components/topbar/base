<div
  id="agnostic-state"
  class="h-[var(--maintoolbar-height)] w-full absolute top-0 left-0 bg-base-300"
>
  <div class="absolute top-[6px] left-[1%] z-[9999]">
    <div
      class="flex justify-start items-center font-black h-[32px] w-[150px] duration-300 ease-in-out"
    >
      <div class="inline-grid">
        <span
          class="pointer-events-none col-start-1 row-start-1 bg-[linear-gradient(90deg,theme(colors.error)_0%,theme(colors.secondary)_9%,theme(colors.secondary)_42%,theme(colors.primary)_47%,theme(colors.accent)_100%)] bg-clip-text blur-xl [-webkit-text-fill-color:transparent] [transform:translate3d(0,0,0)] before:content-[attr(data-text)] [@supports(color:oklch(0%_0_0))]:bg-[linear-gradient(90deg,oklch(var(--s))_4%,color-mix(in_oklch,oklch(var(--s)),oklch(var(--er)))_22%,oklch(var(--p))_45%,color-mix(in_oklch,oklch(var(--p)),oklch(var(--a)))_67%,oklch(var(--a))_100.2%)]"
          aria-hidden="true"
          data-text="component library"
        ></span>
        <span
          class="[&::selection]:text-base-content relative col-start-1 row-start-1 bg-[linear-gradient(90deg,theme(colors.error)_0%,theme(colors.secondary)_9%,theme(colors.secondary)_42%,theme(colors.primary)_47%,theme(colors.accent)_100%)] bg-clip-text [-webkit-text-fill-color:transparent] [&::selection]:bg-blue-700/20 [@supports(color:oklch(0%_0_0))]:bg-[linear-gradient(90deg,oklch(var(--s))_4%,color-mix(in_oklch,oklch(var(--s)),oklch(var(--er)))_22%,oklch(var(--p))_45%,color-mix(in_oklch,oklch(var(--p)),oklch(var(--a)))_67%,oklch(var(--a))_100.2%)]"
        >
          {{ '{{ AGNOSTIC }}'|e('html') }}
        </span>
      </div>
    </div>
  </div>
  {{ include("builder/components/topbar/actions.html") }}
  {{ include("builder/components/editor/builder-theme.html") }}

  <div class="absolute right-[15%] top-[6px] z-[9999]">
    <div class="join">
      <button
        :class="{ 'btn-active': tab === 'Code' }"
        class="py-1 btn join-item !h-[1rem] !min-h-[2rem]"
        @click="tab = 'Code'"
      >
        Code
      </button>
      <button
        :class="{ 'btn-active': tab === 'Build' }"
        class="py-1 btn join-item !h-[1rem] !min-h-[2rem]"
        @click="tab = 'Build'"
      >
        Build
      </button>
      <button
        :class="{ 'btn-active': tab === 'Config' }"
        class="py-1 btn join-item !h-[1rem] !min-h-[2rem]"
        @click="tab = 'Config'"
      >
        Config
      </button>
      <button
        :class="{ 'btn-active': tab === 'Prompt' }"
        class="py-1 btn join-item !h-[1rem] !min-h-[2rem]"
        @click="window.TabManager.isMinimized = !window.TabManager.isMinimized"
      >
          <svg
            width="15"
            height="15"
            viewBox="0 0 15 15"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            class="font-thin fill-primary"
          >
            <path
              d="M4.67129 3.14634C4.47603 3.34161 4.47603 3.65819 4.67129 3.85345L7.14616 6.32833C7.34142 6.52359 7.65801 6.52359 7.85327 6.32833L10.3281 3.85345C10.5234 3.65819 10.5234 3.34161 10.3281 3.14634L7.85327 0.671471C7.65801 0.476209 7.34142 0.476209 7.14616 0.671471L4.67129 3.14634ZM7.49971 5.26766L5.73195 3.4999L7.49971 1.73213L9.26748 3.4999L7.49971 5.26766ZM8.67129 7.14634C8.47603 7.34161 8.47603 7.65819 8.67129 7.85345L11.1462 10.3283C11.3414 10.5236 11.658 10.5236 11.8533 10.3283L14.3281 7.85345C14.5234 7.65819 14.5234 7.34161 14.3281 7.14634L11.8533 4.67147C11.658 4.47621 11.3414 4.47621 11.1462 4.67147L8.67129 7.14634ZM11.4997 9.26766L9.73195 7.4999L11.4997 5.73213L13.2675 7.4999L11.4997 9.26766ZM4.67129 11.8535C4.47603 11.6582 4.47603 11.3416 4.67129 11.1463L7.14616 8.67147C7.34142 8.47621 7.65801 8.47621 7.85327 8.67147L10.3281 11.1463C10.5234 11.3416 10.5234 11.6582 10.3281 11.8535L7.85327 14.3283C7.65801 14.5236 7.34142 14.5236 7.14616 14.3283L4.67129 11.8535ZM5.73195 11.4999L7.49971 13.2677L9.26748 11.4999L7.49971 9.73213L5.73195 11.4999ZM0.671288 7.14649C0.476026 7.34175 0.476026 7.65834 0.671288 7.8536L3.14616 10.3285C3.34142 10.5237 3.65801 10.5237 3.85327 10.3285L6.32814 7.8536C6.5234 7.65834 6.5234 7.34175 6.32814 7.14649L3.85327 4.67162C3.65801 4.47636 3.34142 4.47636 3.14616 4.67162L0.671288 7.14649ZM3.49972 9.26781L1.73195 7.50005L3.49972 5.73228L5.26748 7.50005L3.49972 9.26781Z"
              fill-rule="evenodd"
              clip-rule="evenodd"
            ></path>
          </svg>
      </button>
    </div>
  </div>
  <div
    id="style-config"
    class="absolute w-[375px] mt-[var(--maintoolbar-height)] top-0 bg-base-300 z-[9999] right-0 overflow-auto h-[calc(100vh-var(--maintoolbar-height))]"
    x-show="tab === 'Config'"
    x-transition:enter="transition-opacity duration-300"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100"
    x-transition:leave="transition-opacity duration-300"
    x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0"
  >
    {{ include("builder/components/editor/config") }}
  </div>
  {# <div
    id="prompt-config"
    class="absolute mt-[var(--maintoolbar-height)] top-0 left-0 w-full bg-base-300 z-[9999] overflow-auto h-[calc(100vh-var(--maintoolbar-height))]"
    x-show="tab === 'Prompt'"
    x-transition:enter="transition-opacity duration-300"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100"
    x-transition:leave="transition-opacity duration-300"
    x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0"
  >
    {{ include("builder/components/editor/prompts") }}
  </div> #}

  {{ include("builder/components/editor/full-screen") }}

  {# Agnostic Manager Wrappers all of the builder, do not close div #}

  <script>
    function AgnosticManager() {
        return {
            init: false,
            active: false,
            tab: "Build",
            mode: "config",
            position: "right",
            active_el: null,
            configEditor: null,
            cssEditor: null,
            isInitialLoad: true,
            save_progress: false,
            activeTab: "editor",
            rest_url: "/wp-json/agnostic/v1",
            rest_nonce: "{{ function('wp_create_nonce', 'wp_rest') }}",
            raw_html: "",
            theme: localStorage.getItem("builderTheme") || "night",
            hasInitialized: false,

            init() {
                console.log("Init Agnostic Manager");
                this.debouncedUpdateTailwindConfig = this.debounce(this.updateTailwindConfig.bind(this), 300);
                this.debouncedUpdateTailwindCSS = this.debounce(this.updateTailwindCSS.bind(this), 300);
                window.AgnosticState = this;
            },

            debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            },

            initConfigTab() {
                if (this.hasInitialized) {
                    console.log("AgnosticManager has already been initialized.");
                    return;
                }
                this.getTailwindConfig();
                this.getTailwindCSS();
                this.setTheme(this.theme);
                window.AgnosticState = this;
                this.hasInitialized = true;
            },

            setTheme(newTheme) {
                this.theme = newTheme;
                document.documentElement.setAttribute("data-theme", this.theme);
                localStorage.setItem("builderTheme", this.theme);
            },

            initDocument() {
                const html = doc.querySelector("html").outerHTML;
                this.raw_html = html;
            },

            setDoc() {
                doc.querySelector("html").outerHTML = this.raw_html;
            },

            getTailwindConfig() {
                this.restRequest("GET", "/tailwind-config", null, (data) => {
                    console.log("Tailwind config loaded successfully", data);
                    const clean = prettyJavaScript(data);
                    console.log(clean, "THIS IS THE CLEANED JS", data);
                    window.configEditor.setValue(clean);
                    this.isInitialLoad = false;
                });
            },

            getTailwindCSS() {
                this.restRequest("GET", "/tailwind-css", null, (data) => {
                    console.log("Tailwind CSS loaded successfully", data);
                    const clean = prettyCSS(data);
                    console.log(clean, "THIS IS THE CLEANED CSS", data);
                    window.cssEditor.setValue(clean);
                    window.global_cssEditor.setValue(clean);
                    this.isInitialLoad = false;
                });
            },

            updateTailwindConfig() {
                console.log('Updating Tailwind config');
                const content = window.configEditor.getValue();
                this.restRequest(
                    "POST",
                    "/tailwind-config",
                    content,
                    () => {
                        console.log("Tailwind config updated successfully");
                        window.refreshTailwind();
                    }
                );
            },

            updateTailwindCSS() {
                console.log('Updating Tailwind CSS');
                const content = window.cssEditor.getValue();
                this.restRequest(
                    "POST",
                    "/tailwind-css",
                    content,
                    () => {
                        console.log("Tailwind CSS updated successfully");
                        window.refreshTailwind();
                    }
                );
            },

            saveConfig() {
                this.save_progress = true;
                console.log("Saving Tailwind config");
                this.updateTailwindConfig();
            },

            saveCSS() {
                this.save_progress = true;
                console.log("Saving Tailwind CSS");
                this.updateTailwindCSS();
            },

            restRequest(method, endpoint, data, successCallback) {
                console.log(`Starting REST request: ${method} ${endpoint}`, { data });
                const url = this.rest_url + endpoint;
                const options = {
                    method: method,
                    headers: {
                        "X-WP-Nonce": this.rest_nonce,
                    },
                    credentials: "same-origin",
                };
                if (data && method !== "GET") {
                    if (endpoint === "/tailwind-config" || endpoint === "/tailwind-css") {
                        options.headers["Content-Type"] = "text/plain";
                        options.body = data;
                    } else {
                        options.headers["Content-Type"] = "application/json";
                        options.body = JSON.stringify(data);
                    }
                }
                fetch(url, options)
                    .then((response) => {
                        console.log("Received response:", response);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.text();
                    })
                    .then((text) => {
                        let result;
                        try {
                            result = JSON.parse(text);
                        } catch (e) {
                            result = text;
                        }
                        console.log("Parsed result:", result);
                        successCallback(result);
                    })
                    .catch((error) => {
                        console.error("Error during REST request:", error);
                        console.error("Error stack:", error.stack);
                    })
                    .finally(() => {
                        console.log("Request lifecycle complete");
                    });
            },

            togglePosition(newPosition) {
                this.position = this.position === newPosition ? "left" : newPosition;
            },
        };
    }

    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    function reinitializeIframeWithTransition(newSrcdoc) {
      if (!document.startViewTransition) {
        const iframe = document.querySelector("#previewiframe");
        iframe.srcdoc = newSrcdoc;
        return;
      }

      const oldIframe = document.querySelector("#previewiframe");
      const iframeContainer = oldIframe.parentElement;

      const newIframe = document.createElement("iframe");
      newIframe.id = "previewiframe-new";
      newIframe.srcdoc = newSrcdoc;
      newIframe.style.display = "none";

      iframeContainer.appendChild(newIframe);

      newIframe.onload = () => {
        const transition = document.startViewTransition(() => {
          newIframe.style.display = "";
          newIframe.id = "previewiframe";

          oldIframe.style.display = "none";
          oldIframe.id = "previewiframe-old";

          return Promise.resolve();
        });

        transition.finished.then(() => {
          console.log("View transition completed");
          oldIframe.remove();
        });
      };
    }

    document.addEventListener("DOMContentLoaded", function () {
      const storedTheme = localStorage.getItem("builderTheme");
      if (!storedTheme) {
        localStorage.setItem("builderTheme", "night");
        document.documentElement.setAttribute("data-theme", "night");
      } else {
        document.documentElement.setAttribute("data-theme", storedTheme);
      }
    });
  </script>

  <style>
    @keyframes fade-in {
      from {
        opacity: 0;
      }
    }

    @keyframes fade-out {
      to {
        opacity: 0;
      }
    }

    ::view-transition-old(root) {
      animation: 300ms cubic-bezier(0.4, 0, 1, 1) both fade-out;
    }

    ::view-transition-new(root) {
      animation: 300ms cubic-bezier(0, 0, 0.2, 1) both fade-in;
    }
  </style>
</div>
